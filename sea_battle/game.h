#ifndef GAME_H
#define GAME_H

#define IDLE 0 // —ç—Ç–æ —Ñ–ª–∞–≥–∏ –¥–ª—è Canon
#define ANIMATING 1
#define GAME_RUNNING 1
#define DONT_RUNNING 0
#define SHOW_SHIPS 1 // for draw_board()
#define DONT_SHOW_SHIPS 0
#define IS_PLAYER 1 
#define IS_COMPUTER 0       // next 4 for init_cannon() on run_game()
#define OFFSET_X_FROM_BOARD 26 // –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É - –∑–∞–≤—è–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞ –≥–æ–ª–æ–≤–Ω—è–∫. 26=20 –∫–æ—Ä–∞–±–ª–∏ –º–æ–≥—É—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –∏–∑ –ø–æ–ª–µ–π –∏ 6 —ç—Ç–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —à–∏—Ä–∏–Ω—ã after –∫–∞—Ä—Ç–∏–Ω–∫–∏
#define OFFSET_Y_FROM_BOARD 70
#define OFFSET_Y_FROM_COMPUTER_CANON 250
#define ISLAND_BELOW_PLAYER_CANON 10
#define PLAYER_CANNON_PIVOT_X 90
#define PLAYER_CANNON_PIVOT_Y 55
#define COMPUTER_CANNON_PIVOT_X 105
#define COMPUTER_CANNON_PIVOT_Y 43
#define DELAY_FIRE_CANON 500 // 0.5 —Å–µ–∫—É–Ω–¥—ã
#define STARTING_TRANSPARENCY 255 // —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
#define SPEED_TRANSPARENCY_BY_FRAME 5
#define BARREL_OR_CORE_ROTATION_SPEED_SECOND_PER_FRAME 0.033
#define ANGLE_BETWEEN_DIRECTION_PLAYER_BARREL_AND_ITS_TEXTURE -7.0
#define PLAYER_BARREL_LENGTH 82
#define SPEED_CONNONBALL 220.0f

typedef struct GameBoard GameBoard;
typedef struct GraphicsContext GraphicsContext;
typedef struct GameLandmarks GameLandmarks;
typedef struct Mix_Chunk Mix_Chunk;
typedef struct Mix_Music Mix_Music;

typedef struct Cannon{ // –±–µ–∑ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∞–Ω–∞–Ω–∏–º—É—Å–æ–º –æ–±–∑—ã–≤–∞–µ—Ç—Å—è
    SDL_Texture* canon_platform_texture;    // –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–∞—è –æ–ø–æ—Ä–∞
    SDL_Texture* barrel_texture;  // –≤—Ä–∞—â–∞—é—â–∏–π—Å—è —Å—Ç–≤–æ–ª
    SDL_Texture* canon_fire_texture;
    int base_x, base_y;           // –ø–æ–∑–∏—Ü–∏—è –æ–ø–æ—Ä—ã
    char barrel_pivot_x, barrel_pivot_y; // —Ç–æ—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–≤–æ–ª–∞ (90,55)
    double current_angle;         // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª —Å—Ç–≤–æ–ª–∞
    double target_angle;          // —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª
    char is_animating; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    char is_firing;   
    Uint32 animation_end_time; // –∫–æ–≥–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨ –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    Uint32 fire_delay;        // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–≥–Ω—è (500ms)       
    unsigned char current_alpha;       // üÜï —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (255 = –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
    double rotation_speed;
} Cannon;

typedef struct Cannonball{
    char is_active;           // –ª–µ—Ç–∏—Ç –ª–∏ —è–¥—Ä–æ
    SDL_Texture* texture;
    int start_x, start_y;     // —Ç–æ—á–∫–∞ –≤—ã–ª–µ—Ç–∞ (—Å—Ä–µ–∑ —Å—Ç–≤–æ–ª–∞)
    int target_x, target_y;   // —Ü–µ–Ω—Ç—Ä —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏
    char target_cell_x, target_cell_y;  
    int current_x, current_y; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    float progress;           // 0.0 ‚Üí 1.0 (–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å) —Ä–∞–¥–∏ –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—ë—Ç–∞ - –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ–¥—ã–º–∞–µ–º—Å—è –≤—Ç–æ—Ä—É—é –æ–ø—É—Å–∫–∞–µ–º—Å—è
    Uint32 start_time;        // –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    Uint32 flight_duration;   // ???? –∑–∞—á–µ–º ? –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–∞ (ms)
    double rotation_angle;    // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
    double rotation_speed;    // —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
    float parabola_height;  // üÜï –≤—ã—Å–æ—Ç–∞ –ø–∞—Ä–∞–±–æ–ª—ã
} Cannonball;

typedef struct GameAudio{
    Mix_Chunk* cannon_shot;    // –≤—ã—Å—Ç—Ä–µ–ª –ø—É—à–∫–∏
    /*Mix_Chunk* water_splash;   // –ø—Ä–æ–º–∞—Ö 
    Mix_Chunk* ship_hit;       // –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫–æ—Ä–∞–±–ª—å*/
    Mix_Chunk* victory;        // –ø–æ–±–µ–¥–∞
    //Mix_Music* background;     // —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
} GameAudio;

typedef struct {
    char running;
    GameBoard* player_board;
    GameBoard* computer_board;
    Cannon player_cannon;
    Cannon computer_cannon;
    Cannonball cannonball;
    char current_turn;  // üÜï PLAYER_TURN –∏–ª–∏ COMPUTER_TURN
    GameAudio audio; // –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞, —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏ —Ç.–¥.)
} GameState;



void run_game(const GraphicsContext* ctx, const GameLandmarks* landmarks);
void event_processing(GameState* game, const GraphicsContext* ctx, 
    const GameLandmarks* landmarks, GameAudio* audio);
void compose_frame(GameState* game, double delta_time, Uint32 current_time, 
    const GraphicsContext* ctx, const GameLandmarks* landmarks, GameAudio* audio);
void init_cannon(Cannon* cannon, char is_player, int base_x, int base_y, 
    SDL_Renderer* renderer);
void aim_cannon_at(Cannon* cannon, int target_x, int target_y, 
    const GraphicsContext* ctx, const GameLandmarks* landmarks,
    Cannonball* cannonball);
void update_cannon_animation(Cannon* cannon, double delta_time);
void fire_cannonball(Cannonball* ball, const Cannon* cannon, Uint32 current_time);
void update_cannonball(GameState* game, Uint32 current_time);
void reset_cannonball(Cannonball* ball)
void process_shot_result(GameState* game);
GameAudio* load_audio();
void play_cannon_shot(GameAudio* audio);
void play_victory(GameAudio* audio);
void cleanup_audio(GameAudio* audio);
#endif