#ifndef GAME_STATE_H
#define GAME_STATE_H

#include <stdint.h> // –¥–ª—è uint32_t



#define DELAY_FIRE_CANON 500 // 0.5 —Å–µ–∫—É–Ω–¥—ã
#define PLAYER_CANNON_PIVOT_X 90
#define PLAYER_CANNON_PIVOT_Y 55
#define COMPUTER_CANNON_PIVOT_X 105
#define COMPUTER_CANNON_PIVOT_Y 43
#define STARTING_TRANSPARENCY 255 // —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
#define BARREL_OR_CORE_ROTATION_SPEED_SECOND_PER_FRAME 0.033
#define ANGLE_BETWEEN_DIRECTION_PLAYER_BARREL_AND_ITS_TEXTURE -7.0
#define PLAYER_BARREL_LENGTH 82
#define SPEED_CONNONBALL 220.0f
#define DURATION_OF_SPLASHES 1000
#define Y_CRUTCH_FOR_SPLASHES 8
#define OFFSET_Y_FROM_COMPUTER_CANON 250
#define IDLE 0 // —ç—Ç–æ —Ñ–ª–∞–≥–∏ –¥–ª—è Canon
#define ANIMATING 1
#define GAME_RUNNING 1
#define DONT_RUNNING 0
#define DONT_SHOW_SHIPS 0
#define GRID_SIZE 10  // –Ω–µ–π—Ä–æ–Ω–∫–∞ –ø–æ–æ–±–µ—â–∞–ª–∞ —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö cells –ø—Ä–∏–≤–µ–¥—ë—Ç —Å–∞–º –∫ (char)
#define MAX_SHIPS 10 // –ø–æ–∫–∞ 4 —á–µ—Ç—ã—Ä—ë—Ö–ø–∞–ª—É–±–Ω—ã—Ö
#define EDGE 21
#define BETWEEN_GRIDS 228
#define LAST 9 // –ø—Ä–æ —Å—Ç–æ–ª–± –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–ª–µ—Ç–∫–∏
#define PENULTIMATE 8 // –ø—Ä–æ —Å—Ç–æ–ª–± –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–ª–µ—Ç–∫–∏
#define LEFT  0 // —ç—Ç–∏ 4 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫ —É –∫–æ—Ä–∞–±–ª—è
#define RIGHT 1  
#define UP    2
#define DOWN  3
#define INVALID_DIRECTION 7 // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ
#define WIDTH 1270
#define HEIGHT 700
#define CELL_SIZE 50
#define GRID_SIZE 10
#define X_CRUTCH_VERTICAL_SHIPS 62
#define WIDTH_CANON_TEXTURE 176  // –ø–æ–∫–∞ –¥–ª—è —Å—Ç–≤–æ–ª–∞ –∏ –æ–ø–æ—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –±—É–¥—É
#define HEIGHT_CANON_TEXTURE 122
#define WIDTH_PLAYER_ISLAND_TEXTURE 167
#define HEIGHT_PLAYER_ISLAND_TEXTURE 173
#define WIDTH_COMPUTER_ISLAND_TEXTURE 187
#define HEIGHT_COMPUTER_ISLAND_TEXTURE 146
#define X_CRUTCH_COMPUTER_ISLAND - 4
#define Y_CRUTCH_COMPUTER_ISLAND 15
#define WIDTH_PLAYER_FIRE_CANON_TEXTURE 165
#define HEIGHT_PLAYER_FIRE_CANON_TEXTURE 95
#define OFFSET_X_FROM_FIRE_OF_CANON 166 
#define OFFSET_Y_FROM_FIRE_OF_CANON - 3
#define PIVOT_X_FROM_FIRE_OF_CANON -76
#define PIVOT_Y_FROM_FIRE_OF_CANON 58
#define WIDTH_SPRAY_TEXTURE 50
#define HEIGHT_SPRAY_TEXTURE 66
#define STARTING_TRANSPARENCY 255 // —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è
#define SPEED_TRANSPARENCY_BY_FRAME 5 // —ç—Ç–æ—Ç –¥–ª—è –æ–≥–Ω—è –ø—É—à–∫–∏ –∏ –±—Ä—ã–∑–≥–æ–≤
#define SHOW_SHIPS 1 // for draw_board()
#define OFFSET_X_FROM_BOARD 26 // –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É - –∑–∞–≤—è–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞ –≥–æ–ª–æ–≤–Ω—è–∫. 26=20 –∫–æ—Ä–∞–±–ª–∏ –º–æ–≥—É—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –∏–∑ –ø–æ–ª–µ–π –∏ 6 —ç—Ç–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —à–∏—Ä–∏–Ω—ã after –∫–∞—Ä—Ç–∏–Ω–∫–∏
#define OFFSET_Y_FROM_BOARD 70
#define ISLAND_BELOW_PLAYER_CANON 10
#define IS_PLAYER 1 
#define IS_COMPUTER 0       // next 4 for init_cannon() on run_game()
#define TIME_EVERY_SHIPS_FIRE 170

typedef struct GameAudio GameAudio;
typedef struct SDL_Window SDL_Window;
typedef struct SDL_Renderer SDL_Renderer;
typedef struct SDL_Texture SDL_Texture;
typedef uint32_t Uint32;


typedef struct GameLandmarks{ 
    int player_x; 
    int computer_x; 
    int offset_y;  
} GameLandmarks; 

typedef struct Ship{
    char x, y; // —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∫–ª–µ—Ç–∫–∞–º, –∫–æ–≥–¥–∞ –±—ã–ª –∑–Ω–∞–∫–æ–≤—ã–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –¥–∏—á—å —Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–∫–∞–º–∏
    char direction; 
    char deck_count;
    char hits;
} Ship;

typedef struct GameBoard{
    char cells[GRID_SIZE][GRID_SIZE]; 
    Ship ships[MAX_SHIPS]; // 10 –∫–æ—Ä–∞–±–ª–µ–π –≤—Å–µ–≥–æ
    char ship_count; // —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö
} GameBoard;

typedef enum {
    CELL_EMPTY = 0,
    CELL_SHIP = 1, 
    CELL_FIRE = 2
} CellState;

typedef struct Cannon{ // –±–µ–∑ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∞–Ω–∞–Ω–∏–º—É—Å–æ–º –æ–±–∑—ã–≤–∞–µ—Ç—Å—è
    SDL_Texture* canon_platform_texture;    // –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–∞—è –æ–ø–æ—Ä–∞
    SDL_Texture* barrel_texture;  // –≤—Ä–∞—â–∞—é—â–∏–π—Å—è —Å—Ç–≤–æ–ª
    SDL_Texture* canon_fire_texture;
    int base_x, base_y;           // –ø–æ–∑–∏—Ü–∏—è –æ–ø–æ—Ä—ã
    char barrel_pivot_x, barrel_pivot_y; // —Ç–æ—á–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–≤–æ–ª–∞ (90,55)
    double current_angle;         // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª —Å—Ç–≤–æ–ª–∞
    double target_angle;          // —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª
    char is_animating; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    char is_firing;   
    Uint32 animation_end_time; // –∫–æ–≥–¥–∞ –ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨ –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    Uint32 fire_delay;        // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ–≥–Ω—è (500ms)       
    unsigned char current_alpha;       // üÜï —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (255 = –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
    double rotation_speed;
} Cannon;

typedef struct Cannonball{
    char is_active;           // –ª–µ—Ç–∏—Ç –ª–∏ —è–¥—Ä–æ
    SDL_Texture* texture;
    int start_x, start_y;     // —Ç–æ—á–∫–∞ –≤—ã–ª–µ—Ç–∞ (—Å—Ä–µ–∑ —Å—Ç–≤–æ–ª–∞)
    int target_x, target_y;   // —Ü–µ–Ω—Ç—Ä —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏
    char target_cell_x, target_cell_y;  
    int current_x, current_y; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    float progress;           // 0.0 ‚Üí 1.0 (–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å) —Ä–∞–¥–∏ –ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—ë—Ç–∞ - –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ–¥—ã–º–∞–µ–º—Å—è –≤—Ç–æ—Ä—É—é –æ–ø—É—Å–∫–∞–µ–º—Å—è
    Uint32 start_time;        // –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    Uint32 flight_duration;   // ???? –∑–∞—á–µ–º ? –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–∞ (ms)
    double rotation_angle;    // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
    double rotation_speed;    // —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
    float parabola_height;  // üÜï –≤—ã—Å–æ—Ç–∞ –ø–∞—Ä–∞–±–æ–ª—ã
} Cannonball;

typedef struct FireNode {
    unsigned char cell_x, cell_y;          // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
    unsigned char current_frame;  // —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ (0-7)
    Uint32 last_frame_time;       // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã –∫–∞–¥—Ä–∞
    struct FireNode* next;        // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –æ–≥–æ–Ω—å
} FireNode;

typedef struct GameState{
    char running;
    GameBoard* player_board;
    GameBoard* computer_board;
    Cannon player_cannon;
    Cannon computer_cannon;
    Cannonball cannonball;
    int current_turn;  // üÜï PLAYER_TURN –∏–ª–∏ COMPUTER_TURN
    char show_spray;
    Uint32 spray_end_time;
    int spray_x;
    int spray_y;
    unsigned char spray_alpha; 
    GameAudio* audio; 
    FireNode* active_fires;       // üÜï —Å—Ç–µ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥–Ω–µ–π
} GameState;

typedef struct GraphicsContext{ // —Ä–µ–Ω–¥–µ—Ä–µ—Ä, –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    SDL_Window* window; // –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    SDL_Renderer* renderer; // —Ä–∏—Å–æ–≤–∞–ª—å—â–∏–∫
    int width_of_window;
    int height_of_window;
    unsigned char cell_size; // —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö, –∫–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å cell_size –• cell_size –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
    int field_size;
    SDL_Texture* ship_jup_1p;    // –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã–π
    SDL_Texture* ship_jup_2p;  // –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–π   
    SDL_Texture* ship_jup_3p;
    SDL_Texture* ship_jup_4p;  // —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω—ã–π
    SDL_Texture* player_island_texture;
    SDL_Texture* computer_island_texture; 
    SDL_Texture* fire_ship1;
    SDL_Texture* fire_ship2;
    SDL_Texture* fire_ship3;
    SDL_Texture* fire_ship4;
    SDL_Texture* fire_ship5;
    SDL_Texture* fire_ship6;
    SDL_Texture* fire_ship7;
    SDL_Texture* fire_ship0;
    SDL_Texture* spray_texture; // –±—Ä—ã–∑–≥–∏
} GraphicsContext; 




void init_board(GameBoard* board);
GameLandmarks calculate_landmarks(const GraphicsContext* ctx);
void init_cannon(Cannon* cannon, char is_player, int base_x, int base_y, 
    SDL_Renderer* renderer);
void reset_cannonball(Cannonball* ball);
void add_fire_to_stack(GameState* game, int cell_x, int cell_y, Uint32 current_time);
void cleanup_fires(GameState* game);
void cleanup_game(GameState* game);
#endif